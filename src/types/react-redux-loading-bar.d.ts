/** Declaration file generated by dts-gen */

export class ImmutableLoadingBar {
    constructor(props: any, context: any);

    addExtraProps(props: any): any;

    componentDidMount(): void;

    componentWillReceiveProps(nextProps: any): void;

    componentWillUnmount(): void;

    componentWillUpdate(): any;

    getChildContext(): any;

    getWrappedInstance(): any;

    initSelector(): void;

    initSubscription(): void;

    isSubscribed(): any;

    notifyNestedSubsOnComponentDidUpdate(): void;

    onStateChange(): void;

    render(): any;

    setWrappedInstance(ref: any): void;

    shouldComponentUpdate(): any;

    static displayName: string;

}

export class LoadingBar {
    constructor(...args: any[]);

    buildStyle(): any;

    componentDidMount(): void;

    componentWillReceiveProps(nextProps: any): any;

    componentWillUnmount(): void;

    launch(): any;

    render(): any;

    shouldShow(): any;

    static defaultProps: {
        className: string;
        loading: number;
        maxProgress: number;
        progressIncrease: number;
        scope: string;
        showFastActions: boolean;
        style: {
        };
        updateTime: number;
    };

}

export function hideLoading(...args: any[]): any;

export function loadingBarMiddleware(...args: any[]): any;

export function loadingBarReducer(...args: any[]): any;

export function resetLoading(...args: any[]): any;

export function showLoading(...args: any[]): any;

export namespace ImmutableLoadingBar {
    class WrappedComponent {
        constructor(...args: any[]);

        buildStyle(): any;

        componentDidMount(): void;

        componentWillReceiveProps(nextProps: any): any;

        componentWillUnmount(): void;

        launch(): any;

        render(): any;

        shouldShow(): any;

        static defaultProps: {
            className: string;
            loading: number;
            maxProgress: number;
            progressIncrease: number;
            scope: string;
            showFastActions: boolean;
            style: {
            };
            updateTime: number;
        };

    }

    namespace WrappedComponent {
        namespace propTypes {
            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function loading(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function maxProgress(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function progressIncrease(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function scope(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function showFastActions(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function updateTime(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace className {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.className
                const isRequired: any;

            }

            namespace loading {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.loading
                const isRequired: any;

            }

            namespace maxProgress {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.maxProgress
                const isRequired: any;

            }

            namespace progressIncrease {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.progressIncrease
                const isRequired: any;

            }

            namespace scope {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.scope
                const isRequired: any;

            }

            namespace showFastActions {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.showFastActions
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.style
                const isRequired: any;

            }

            namespace updateTime {
                // Too-deep object hierarchy from react_redux_loading_bar.ImmutableLoadingBar.WrappedComponent.propTypes.updateTime
                const isRequired: any;

            }

        }



    }

    namespace childContextTypes {
        function storeSubscription(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace storeSubscription {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace contextTypes {
        function store(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function storeSubscription(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace store {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace storeSubscription {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace propTypes {
        function store(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function storeSubscription(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace store {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace storeSubscription {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace LoadingBar {
    namespace propTypes {
        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function loading(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function maxProgress(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function progressIncrease(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function scope(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function showFastActions(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function updateTime(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace loading {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace maxProgress {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace progressIncrease {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace scope {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace showFastActions {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace updateTime {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }


}

export namespace hideLoading {
    const prototype: {
    };

}

export namespace loadingBarMiddleware {
    const prototype: {
    };

}

export namespace loadingBarReducer {
    const prototype: {
    };

}

export namespace resetLoading {
    const prototype: {
    };

}

export namespace showLoading {
    const prototype: {
    };

}


